package {{ controllerITField.packagePath }};

import {{ repoField.packagePath }}.{{ repoField.className }};
import {{ modelField.packagePath }}.{{ modelField.className }};

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;

import static org.hamcrest.CoreMatchers.*;
import static org.hamcrest.MatcherAssert.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest
@ActiveProfiles("test")
public class {{ controllerITField.className }} {

    @Autowired
    private {{ repoField.className }} repo;

    @Autowired
    private {{ controllerField.className }}  classUnderTest;

    @Test
    public void testCreate() throws Exception {
        {{ modelField.className }} instance = new {{ modelField.className }}();
        {{ idField.className }} id = instance.get{% filter capitalize %}{{ idField.varName }}{% endfilter %}();

        {{ modelField.className }} createdInstance = this.classUnderTest.create(instance);

        assertThat(id, not(createdInstance.get{% filter capitalize %}{{ idField.varName }}{% endfilter %}()));
    }

    @Test
    public void testRead() throws Exception {
        {{ modelField.className }} instanceToFind = this.saveInstance();
        {{ idField.className }} id = instanceToFind.get{% filter capitalize %}{{ idField.varName }}{% endfilter %}();

        {{ modelField.className }} foundInstance = this.classUnderTest.read(id);

        assertThat(instanceToFind, equalTo(foundInstance));
    }

    @Test
    public void testDelete() throws Exception {
        {{ modelField.className }} instanceToFind = this.saveInstance();
        {{ idField.className }} id = instanceToFind.get{% filter capitalize %}{{ idField.varName }}{% endfilter %}();

        assertThat(this.classUnderTest.read(id), is(notNullValue()));

        this.classUnderTest.delete(id);

        assertThat(this.classUnderTest.read(id), is(nullValue()));
    }

    public {{ modelField.className }} saveInstance() {
        return this.repo.save(new {{ modelField.className }}());
    }

}